package com.laofansay.work.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CstAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCstAccountAllPropertiesEquals(CstAccount expected, CstAccount actual) {
        assertCstAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertCstAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCstAccountAllUpdatablePropertiesEquals(CstAccount expected, CstAccount actual) {
        assertCstAccountUpdatableFieldsEquals(expected, actual);
        assertCstAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCstAccountAutoGeneratedPropertiesEquals(CstAccount expected, CstAccount actual) {
        assertThat(expected)
            .as("Verify CstAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCstAccountUpdatableFieldsEquals(CstAccount expected, CstAccount actual) {
        assertThat(expected)
            .as("Verify CstAccount relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getProvider()).as("check provider").isEqualTo(actual.getProvider()))
            .satisfies(e -> assertThat(e.getRbAccount()).as("check rbAccount").isEqualTo(actual.getRbAccount()))
            .satisfies(e -> assertThat(e.getRbPwd()).as("check rbPwd").isEqualTo(actual.getRbPwd()))
            .satisfies(e -> assertThat(e.getRbToken()).as("check rbToken").isEqualTo(actual.getRbToken()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getTimesByDay()).as("check timesByDay").isEqualTo(actual.getTimesByDay()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCstAccountUpdatableRelationshipsEquals(CstAccount expected, CstAccount actual) {
        assertThat(expected)
            .as("Verify CstAccount relationships")
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
