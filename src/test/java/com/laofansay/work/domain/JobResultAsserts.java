package com.laofansay.work.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class JobResultAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobResultAllPropertiesEquals(JobResult expected, JobResult actual) {
        assertJobResultAutoGeneratedPropertiesEquals(expected, actual);
        assertJobResultAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobResultAllUpdatablePropertiesEquals(JobResult expected, JobResult actual) {
        assertJobResultUpdatableFieldsEquals(expected, actual);
        assertJobResultUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobResultAutoGeneratedPropertiesEquals(JobResult expected, JobResult actual) {
        assertThat(expected)
            .as("Verify JobResult auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobResultUpdatableFieldsEquals(JobResult expected, JobResult actual) {
        assertThat(expected)
            .as("Verify JobResult relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getJobUrl()).as("check jobUrl").isEqualTo(actual.getJobUrl()))
            .satisfies(e -> assertThat(e.getAuthorName()).as("check authorName").isEqualTo(actual.getAuthorName()))
            .satisfies(e -> assertThat(e.getAccountId()).as("check accountId").isEqualTo(actual.getAccountId()))
            .satisfies(e -> assertThat(e.getCustomerId()).as("check customerId").isEqualTo(actual.getCustomerId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getJobDate()).as("check jobDate").isEqualTo(actual.getJobDate()))
            .satisfies(e -> assertThat(e.getJobNo()).as("check jobNo").isEqualTo(actual.getJobNo()))
            .satisfies(e -> assertThat(e.getBuilderDate()).as("check builderDate").isEqualTo(actual.getBuilderDate()))
            .satisfies(e -> assertThat(e.getReplay()).as("check replay").isEqualTo(actual.getReplay()))
            .satisfies(e -> assertThat(e.getReplayTheme()).as("check replayTheme").isEqualTo(actual.getReplayTheme()))
            .satisfies(e -> assertThat(e.getReplayImage()).as("check replayImage").isEqualTo(actual.getReplayImage()))
            .satisfies(
                e ->
                    assertThat(e.getReplayImageContentType())
                        .as("check replayImage contenty type")
                        .isEqualTo(actual.getReplayImageContentType())
            )
            .satisfies(e -> assertThat(e.getReplayDate()).as("check replayDate").isEqualTo(actual.getReplayDate()))
            .satisfies(e -> assertThat(e.getEffReplay()).as("check effReplay").isEqualTo(actual.getEffReplay()))
            .satisfies(e -> assertThat(e.getSettlement()).as("check settlement").isEqualTo(actual.getSettlement()))
            .satisfies(e -> assertThat(e.getSettlementOrder()).as("check settlementOrder").isEqualTo(actual.getSettlementOrder()))
            .satisfies(e -> assertThat(e.getSettlementDate()).as("check settlementDate").isEqualTo(actual.getSettlementDate()))
            .satisfies(e -> assertThat(e.getErrorMsg()).as("check errorMsg").isEqualTo(actual.getErrorMsg()))
            .satisfies(e -> assertThat(e.getErrorImage()).as("check errorImage").isEqualTo(actual.getErrorImage()))
            .satisfies(
                e ->
                    assertThat(e.getErrorImageContentType())
                        .as("check errorImage contenty type")
                        .isEqualTo(actual.getErrorImageContentType())
            )
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJobResultUpdatableRelationshipsEquals(JobResult expected, JobResult actual) {
        assertThat(expected)
            .as("Verify JobResult relationships")
            .satisfies(e -> assertThat(e.getCstJob()).as("check cstJob").isEqualTo(actual.getCstJob()));
    }
}
